{"version":3,"file":"AppWebsocket.mock.js","sourceRoot":"","sources":["../src/AppWebsocket.mock.ts"],"names":[],"mappings":"AAEA,OAAO,EAAgB,eAAe,EAAE,MAAM,SAAS,CAAC;AACxD,OAAO,EAAE,OAAO,EAAE,MAAM,WAAW,CAAC;AAEpC,MAAM,OAAO,gBAAgB;IAI3B,YAAsB,UAAqB;QAArB,eAAU,GAAV,UAAU,CAAW;QAH3C,gBAAW,GAAgB,eAAe,EAAE,CAAC;QAC7C,UAAK,GAA6C,EAAE,CAAC;QAGnD,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;YAC1C,OAAO,EAAE,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC;YAC9C,GAAG,EAAE,SAAS;SACf,CAAC,CAAC,CAAC;IACN,CAAC;IAED,KAAK,CAAC,OAAO;QACX,OAAO;YACL,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;SACjE,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,IAOd;QACC,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;QAE5E,IAAI,CAAC,IAAI;YACP,MAAM,IAAI,KAAK,CACb,kCAAkC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CACjE,CAAC;QAEJ,OAAO,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC;YACvB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,UAAU,EAAE,IAAI,CAAC,UAAU;SAC5B,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["import { AgentPubKey, CellId } from \"@holochain/conductor-api\";\nimport { DnaMock } from \"./dna.mock\";\nimport { hashToString, randomPubKeyRaw } from \"./utils\";\nimport { isEqual } from \"lodash-es\";\n\nexport class AppWebsocketMock {\n  agentPubKey: AgentPubKey = randomPubKeyRaw();\n  cells: Array<{ cell_id: CellId; dna: DnaMock }> = [];\n\n  constructor(protected dnasToMock: DnaMock[]) {\n    this.cells = dnasToMock.map((dnaToMock) => ({\n      cell_id: [dnaToMock.dnaHash, this.agentPubKey],\n      dna: dnaToMock,\n    }));\n  }\n\n  async appInfo() {\n    return {\n      cell_data: this.cells.map((cell) => [cell.cell_id, \"mock-nick\"]),\n    };\n  }\n\n  async callZome(args: {\n    cap: void;\n    cell_id: CellId;\n    zome_name: string;\n    fn_name: string;\n    payload: any;\n    provenance: AgentPubKey;\n  }) {\n    const cell = this.cells.find((cell) => isEqual(cell.cell_id, args.cell_id));\n\n    if (!cell)\n      throw new Error(\n        `Could not find cell for cellId ${JSON.stringify(args.cell_id)}`\n      );\n\n    return cell.dna.callZome({\n      zome_name: args.zome_name,\n      fn_name: args.fn_name,\n      payload: args.payload,\n      provenance: args.provenance,\n    });\n  }\n}\n"]}